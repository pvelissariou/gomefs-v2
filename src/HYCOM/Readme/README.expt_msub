README.expt_msub:

The process of running a simulation is optimized for batch systems, but 
will also work interactively.

The basic procedure is that each invocation of the ocean model results in a
run for a fixed length of (model) time, e.g., one month, or three months, or
one year, or five years.  Each invocation has an associated run script that
identifies which year or part year is involved, e.g., 015y005.com or
015y001a.com (where 015 is the experiment number here).  The initial year 
is indicated by y followed by 3 digits, and if there are multiple parts per
year this is indicated by a letter following the year digits.

Each actual model script is created from a template script using an
awk command:

    015.awk         awk script for modifying 015.com
    015.com         template script for the model run

The number of years per run can be changed by editing ny in 015.awk and
ymx in 015.com.  The 015.awk and 015.com files are presently configured 
for one year runs, as described by # and C lines therein.  Actual scripts 
for single model jobs for the first three years (say) could be generated 
manually using:

    awk -f 015.awk y01=1 015.com > 015y001.com
    awk -f 015.awk y01=2 015.com > 015y002.com
    awk -f 015.awk y01=3 015.com > 015y003.com

If 015.awk were instead configured for 6 month runs (by setting np=2; see 
# lines therein), the two scripts for the first year could be generated
manually using:

    awk -f 015.awk y01=1 ab=a 015.com > 015y001a.com
    awk -f 015.awk y01=1 ab=b 015.com > 015y001b.com

However, manual generation of scripts is rarely necessary.  The process is
automated for batch runs by the 
    msub_codine command and 015cod.com (for CODINE      batch), or 
    msub_grd    command and 015grd.com (for GRD         batch), or 
    msub_ll     command and 015rll.com (for LoadLeveler batch); or
    msub_lsf    command and 015lsf.com (for LSF         batch), or 
    msub_nqs    command and 015nqs.com (for NQS/NQE     batch); or
    msub_pbs    command and 015rll.com (for PBS         batch); or
any of these also work, with the default msub command msub_csh, for 
interactive background runs.  

These scripts read the first line of the LIST file generated by mlist 
(see below).  The scripts either generate a new segment script (if the line
is of the form 'year  segment', such as '001 a', or of the form 'year', such
as '001'), or they use the indicated existing script (e.g., 015y001.com).
The new script is run, and upon its completion the first line is removed
from LIST, and the job either exits (if LIST is empty), or cycles again
(based on the number of segments it is configured to run), or is resubmitted
for the next segment.  The number of segments per job should be chosen 
based on batch run time limits, and is specified by a foreach loop in the 
script - this is currently five in 015lsf.com:
  C
  C --- Number of segments specified by '( SEG1 SEG2 ... )' in foreach.
  C --- Use '( SEG1 )' for a single segment per run.
  C
  foreach seg (SEG1 SEG2 SEG3 SEG4 SEG5)

To generate a LIST file for a sequence of years, invoke the command mlist.  
For example, 
    mlist 1 30 1 
--> a list of model years 1 to 30 in steps of 1 year.  
(See more examples in hycom/ALL/bin/mlist).  

Note that mlist will only be invokable by name if the hycom/ALL/bin 
directory is in your command path.

The command hycom/ALL/bin/msub (msub_csh, msub_codine, msub_grd, msub_ll, 
msub_lsf, msub_nqs, msub_pbs) then runs the script.  For example, 
    msub_nqs 015nqs.com 01
--> the final 2 digits identify the job number.

The advantage of separating out the run list, in LIST, from the batch 
cycling, via msub, is that this gives much finer control of the run process.

The dummy*.com scripts do nothing at all, and can be inserted into LIST
if you want a particular alignment of runs within a .log file.  For 
example, if there are 4 segments per year and 051lsf.com (say) runs 4 
segments then normally one year will be in each .log file.  However, if 
the simulation starts in the Summer the first year can still be in the 
entire first .log file by using the following LIST configuration:
051y001C.com
001 d
dummyA.com
dummyB.com
002 a
002 b
002 c
002 d
In this case the first script, 051y001C.com, would differ from the
standard 051y001c.com script (automatically generated by 001 c in LIST)
by replacing "LIMITS" with "LIMITI" to generate an initial limits file.
The dummy scripts can similarly be used to maintain alignment of runs 
in the .log file after restarting from a model crash.

Note that if the batch system crashes, there will be RUNNING* files left in
this directory that must be deleted before resubmitting the job. 

When running in batch (in addition to setting the number of segments per 
job), the batch script will need configuring to request the appropriate 
resources.  How this is done is batch system specific, but it usually 
involves editing the header of the corresponding batch script.  For example, 
under LoadLeveler lines that start with "#@" are interpreted by the batch 
system and 015rll.com is configured to run for two wall hours on a single 
(4-processor) node with 4 MPI (or OpenMP) tasks:

#!/bin/csh
#
#@ job_name         = XXXrll
#@ output           = $(job_name).log
#@ error            = $(job_name).log
#@ restart          = yes
#@ job_type         = parallel
#@ network.MPI      = css0,not_shared,US
#@ environment      = MP_EUILIB=us     
#@ node             = 1
#@ total_tasks      = 4
#@ node_usage       = not_shared
#@ wall_clock_limit = 2:00:00
#@ account_no       = NRLSS018
#@ class            = batch
#@ queue
#

Some of the above lines will definately need editing for your local setup.
Note that msub_ll inserts the correct name on the "job_name" line, so
XXXrll is ok here for any experiment number.
