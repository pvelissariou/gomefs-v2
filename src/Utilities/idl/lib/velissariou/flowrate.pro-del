FUNCTION FlowRate, unvec, velvec, area, TODIR = todir

  ; It is assumed that unvec represents the normal (possibly outward)
  ; vector to the surface "area". If another direction is desired
  ; use the keyeord variable to change the direction of the calculated
  ; mass fluxes.

  Compile_Opt IDL2

  on_error, 2

  sz = size(unvec)
  if (sz[0] ne 1) and (sz[0] ne 2) then $
    message, 'a 3xn array is required for: UNVECT'
  if ((size(unvec, /DIMENSIONS))[0] ne 3) then $
    message, 'a 3xn array is required for: UNVECT'

  sz = size(velvec)
  if (sz[0] ne 1) and (sz[0] ne 2) then $
    message, 'a 3xn array is required for: VELVEC'
  if ((size(velvec, /DIMENSIONS))[0] ne 3) then $
    message, 'a 3xn array is required for: VELVEC'

  nUNV = n_elements(unvec) / 3
  nVEL = n_elements(velvec) / 3

  if ((nUNV ne 1) and (nUNV ne nVEL)) then $
    message, 'the elements of UNVECT should be 3 or equal to the elements of VELVEC'

  if (n_elements(area) ne nVEL) then $
    message, 'the number of elements in AREA should be equal to: elements(VELVEC) / 3'

  ; Get the precision numbers for the platform used
  eps = (machar()).eps

  ; Make sure that unvec/velvec are of the same size
  oldUNV = unvec
  if (nUNV eq 1) then oldUNV = oldUNV # replicate(1, nVEL)

  ; Examine if we want to do the calculations in another surface
  ; orientation
  if (n_elements(todir) ne 0) then begin
    sz = size(todir)
    if (sz[0] ne 1) and (sz[0] ne 2) then $
      message, 'a 3xn array is required for: TODIR'
    if ((size(todir, /DIMENSIONS))[0] ne 3) then $
      message, 'a 3xn array is required for: TODIR'

    nDIR = n_elements(todir) / 3

    if ((nDIR ne 1) and (nDIR ne nVEL)) then $
      message, 'the elements of TODIR should be 3 or equal to the elements of VELVEC'

    newUNV = todir
    if (nDIR eq 1) then newUNV = newUNV # replicate(1, nVEL)
  endif

  ; Change surface direction if requested
  thisUNV = oldUNV
  if (n_elements(nDIR) ne 0) then thisUNV = newUNV

  flowOUT = [ !VALUES.F_NAN, !VALUES.F_NAN, !VALUES.F_NAN ]
  for i = 0L, nVEL - 1 do begin
    tmp_unv = reform(thisUNV[*, i])
    tmp_vel = reform(velvec[*, i])
    nrm_unv = norm(tmp_unv)
    nrm_vel = norm(tmp_vel)

    if ((nrm_unv * nrm_vel) le eps) then begin
      NORM_flow = 0.0
      TANG_flow = 0.0
      TOTL_flow = NORM_flow + TANG_flow
    endif else begin
      tmp_unv = tmp_unv / nrm_unv

      ; Try to adjust the areas if needed
      NORM_area = area[i]
      TANG_area = 0.0
      if (n_elements(nDIR) ne 0) then begin
        old_unv = reform(oldUNV[*, i])
        nrm_old = norm(old_unv)
        new_unv = reform(newUNV[*, i])
        nrm_new = norm(new_unv)

        if ((nrm_old * nrm_new) le eps) then begin
          NORM_area = 0.0
          TANG_area = 0.0
          TOTL_flow = NORM_flow + TANG_flow
        endif else begin
          ; Make the normals unit vectors
          old_unv = old_unv / nrm_old
          new_unv = new_unv / nrm_new

          dotPROD = (transpose(old_unv) # new_unv)[0]
          alpha  = acos(dotPROD)
          NORM_area = abs( area[i] * dotPROD )
          TANG_area = abs( area[i] * sin(alpha) )
        endelse
      endif

      dotPROD = (transpose(tmp_unv) # tmp_vel)[0]
      alpha = acos(dotPROD / nrm_vel)

      NORM_flow = ZeroFloatFix(dotPROD * NORM_area)
      TANG_flow = ZeroFloatFix(nrm_vel * sin(alpha) * TANG_area)
      TOTL_flow = ZeroFloatFix(NORM_flow + TANG_flow)
    endelse

    flowOUT = [ [flowOUT], [[ TOTL_flow, NORM_flow, TANG_flow ]] ]
  endfor
  if ((size(flowOUT, /DIMENSIONS))[1] gt 1) then $
    flowOUT = flowOUT[*, 1:*]

  return, flowOUT
end
