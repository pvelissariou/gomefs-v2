Pro Ncdf_Hycom_ReadOutput, fname, MASK = mask
;+++
; NAME:
;	Ncdf_Hycom_ReadOutput
; VERSION:
;	1.0
; PURPOSE:
;	To read a bathymetric grid data file and return grid parameters
;       and depths.
;       Assumes that all variables are given at RHO points.
; CALLING SEQUENCE:
;	Ncdf_Hycom_ReadOutput, fname
;	On input:
;	   fname - Full pathway name of the bathymetry/grid data file
;	On output:
;	   All the ROMS output data found in the file
; SIDE EFFECTS:
;	As far as I know none.
; MODIFICATION HISTORY:
;	Created Tue Nov 13 2012 by Panagiotis Velissariou (pvelissariou@fsu.edu).
;+++

  Compile_Opt IDL2

  COMMON BathParams
  COMMON FlowParams

  ; Error handling.
  On_Error, 2

  Undefine_Hycom_Params, /FLOW

  ; check for the validity of the supplied values for "fname" or "lun"
  do_fname = N_Elements(fname) eq 0 ? 0 : 1
  If (do_fname) Then Begin
    If (Size(fname, /TNAME) ne 'STRING') Then $
      Message, "the name supplied for <fname> is not a valid string."

    fname = Strtrim(fname, 2)
    If (not readFILE(fname)) Then $
      Message, "can't read from the supplied file <" + fname + ">."
  EndIf

  do_mask = N_Elements(mask) eq 0 ? 0 : 1
  If (do_mask) Then mask_dims = Size(mask, /DIMENSIONS)

  ; Open and read the input NetCDF file
  ncid = ncdf_open(fname, /NOWRITE)

    ; ----- Required dimensions
    ncdf_diminq, ncid, ncdf_dimid(ncid, 'Depth'),  nm, n_zdeps
      if (strcmp(nm, 'Depth') ne 1) then $
        message, 'Depth dimension is not defined in: ' + fname

    ; ----- Required variables
    varid = ncdf_varid(ncid, 'MT')
    ncdf_varget, ncid, varid, MT
    ncdf_attget, ncid, varid, 'units', RefTimeStr
    RefTimeStr = string(RefTimeStr)

    varid = ncdf_varid(ncid, 'Depth')
    ncdf_varget, ncid, varid, zdeps

    ; ----- Optional variables
    ; ----- SSH
    dat_found = Ncdf_GetData(ncid, 'ssh', ssh, FILL_VAL = ssh_fill, UNITS = ssh_units)
    if ((dat_found gt 0) and do_mask) then begin
      dataType = size(ssh, /TYPE)
      info = machar(double = (dataType EQ 5 OR dataType EQ 9))
      temp_dims = size(ssh, /DIMENSIONS)
      if (array_equal(temp_dims, mask_dims) eq 1) then begin
        ; mask = 0.0 is land
        idx = where(abs(mask) le info.eps, icnt)
        if (icnt ne 0) then ssh[idx] = !VALUES.F_NAN
      endif
    endif

    ; ----- U-VEL
    dat_found = Ncdf_GetData(ncid, 'u', uvel, FILL_VAL = uvel_fill, UNITS = uvel_units)
    if ((dat_found gt 0) and do_mask) then begin
      dataType = size(uvel, /TYPE)
      info = machar(double = (dataType EQ 5 OR dataType EQ 9))
      temp_dims = size(uvel, /DIMENSIONS)
      if (array_equal(temp_dims[0:1], mask_dims) eq 1) then begin
        ; mask = 0.0 is land
        idx = where(abs(mask) le info.eps, icnt)
        if (icnt ne 0) then begin
          for k = 0L, temp_dims[2] - 1 do begin
            scratch_arr = reform(uvel[*, *, k])
            scratch_arr[idx] = !VALUES.F_NAN
            uvel[*, *, k] = scratch_arr
          endfor
        endif
      endif
    endif

    ; ----- V-VEL
    dat_found = Ncdf_GetData(ncid, 'v', vvel, FILL_VAL = vvel_fill, UNITS = vvel_units)
    if ((dat_found gt 0) and do_mask) then begin
      dataType = size(vvel, /TYPE)
      info = machar(double = (dataType EQ 5 OR dataType EQ 9))
      temp_dims = size(vvel, /DIMENSIONS)
      if (array_equal(temp_dims[0:1], mask_dims) eq 1) then begin
        ; mask = 0.0 is land
        idx = where(abs(mask) le info.eps, icnt)
        if (icnt ne 0) then begin
          for k = 0L, temp_dims[2] - 1 do begin
            scratch_arr = reform(vvel[*, *, k])
            scratch_arr[idx] = !VALUES.F_NAN
            vvel[*, *, k] = scratch_arr
          endfor
        endif
      endif
    endif

    ; ----- TEMPERATURE
    dat_found = Ncdf_GetData(ncid, 'temperature', temp, FILL_VAL = temp_fill, UNITS = temp_units)
    if ((dat_found gt 0) and do_mask) then begin
      dataType = size(temp, /TYPE)
      info = machar(double = (dataType EQ 5 OR dataType EQ 9))
      temp_dims = size(temp, /DIMENSIONS)
      if (array_equal(temp_dims[0:1], mask_dims) eq 1) then begin
        ; mask = 0.0 is land
        idx = where(abs(mask) le info.eps, icnt)
        if (icnt ne 0) then begin
          for k = 0L, temp_dims[2] - 1 do begin
            scratch_arr = reform(temp[*, *, k])
            scratch_arr[idx] = !VALUES.F_NAN
            temp[*, *, k] = scratch_arr
          endfor
        endif
      endif
    endif
    
    ; ----- SALINITY
    dat_found = Ncdf_GetData(ncid, 'salinity', salt, FILL_VAL = salt_fill, UNITS = salt_units)
    if ((dat_found gt 0) and do_mask) then begin
      dataType = size(salt, /TYPE)
      info = machar(double = (dataType EQ 5 OR dataType EQ 9))
      temp_dims = size(salt, /DIMENSIONS)
      if (array_equal(temp_dims[0:1], mask_dims) eq 1) then begin
        ; mask = 0.0 is land
        idx = where(abs(mask) le info.eps, icnt)
        if (icnt ne 0) then begin
          for k = 0L, temp_dims[2] - 1 do begin
            scratch_arr = reform(salt[*, *, k])
            scratch_arr[idx] = !VALUES.F_NAN
            salt[*, *, k] = scratch_arr
          endfor
        endif
      endif
    endif
  ncdf_close, ncid
      
end
